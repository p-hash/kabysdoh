#!/usr/bin/env python3
import csv
import glob
import gzip
import json
import os
import sys
import tempfile
import time
from hashlib import sha1
from ipaddress import IPv4Network, IPv4Address, IPv6Address, IPv6Network

csv.field_size_limit(sys.maxsize)

RKN_EPOCH = 1343462400  # Sat Jul 28 12:00:00 MSK 2012
JSONZ_SUFFIX = '.kabysdoh.json'
GZIP_LEVEL = 3  # {1,2,3} have ~same speed, 4 is 40% slower.


def parse_csv(file):
    parser = csv.reader(file, delimiter=';')
    next(parser)
    ipv4 = set()
    ipv4net = set()
    ipv6 = set()
    ipv6net = set()
    for line in parser:
        addresses = line[0].split(' | ')
        for addr in addresses:
            if not addr: 
                continue
            if ':' in addr:
                if '/' in addr:
                    ipv6net.add(IPv6Network(addr))
                else:
                    ipv6.add(IPv6Address(addr))
            else:
                if '/' in addr:
                    ipv4net.add(IPv4Network(addr))
                else:
                    ipv4.add(IPv4Address(addr))
    return ipv4, ipv4net, ipv6, ipv6net


def make_blob():
    ip4, net4, ip6, net6 = set(), set(), set(), set()
    for path in glob.glob('csv/*.csv'):
        with open(path, encoding='cp1251') as fd:
            ip4_, net4_, ip6_, net6_ = parse_csv(fd)
            ip4 |= {str(_) for _ in ip4_}
            net4 |= {str(_) for _ in net4_}
            ip6 |= {str(_) for _ in ip6_}
            net6 |= {str(_) for _ in net6_}
            # NB: `blob` must have consistent content hash, e.g. there should be no timestamps.
    blob = json.dumps({
        'ip': list(ip4),
        'ipSubnet': list(net4),
        'ipv6': list(ip6),
        'ipv6Subnet': list(net6),
    }, ensure_ascii=False, sort_keys=True, separators=(',', ':')).encode('utf-8')
    return blob


def main():
    blob = make_blob()
    filename = sha1(blob).hexdigest().lower() + JSONZ_SUFFIX
    update_time = max(os.path.getmtime(path) for path in glob.glob('csv/*.csv'))
    dst = './js/{}'.format(int(update_time))
    with tempfile.NamedTemporaryFile(dir='./js') as raw, \
         gzip.GzipFile(fileobj=raw, mode='wb', compresslevel=GZIP_LEVEL, filename=filename, mtime=RKN_EPOCH) as out:
        out.write(blob)
        out.flush()
        raw.flush()
        os.link(raw.name, dst)
    os.utime(dst, (time.time(), update_time))


if __name__ == '__main__':
    main()